
function handlePriceKeydown(event, itemIndex) {
    if (event.key === 'Enter') {
        const puPriceInput = document.getElementById(`puPrice-${itemIndex}`);
        const tr = puPriceInput.closest('tr');

        // Remove any existing hidden inputs for this item first
        ['price', 'mrp', 'marginPercentage', 'currency'].forEach(field => {
            const existingInput = tr.querySelector(`input[name="items[${itemIndex}][${field}]"]`);
            if (existingInput) {
                tr.removeChild(existingInput);
            }
        });

        if (puPriceInput.value) {
            // Set the PU Price in the modal
            document.getElementById('puPrice').value = puPriceInput.value;

            // Show the sales price modal
            $('#setSalesPriceModal').modal('show');

            // Handle modal shown event to focus on the margin percentage input
            $('#setSalesPriceModal').on('shown.bs.modal', function () {
                document.getElementById('marginPercentage').focus();
            });

            // Handle margin percentage input
            const marginPercentageInput = document.getElementById('marginPercentage');
            marginPercentageInput.oninput = function () {
                updateSalesPriceFromMargin(puPriceInput.value);
            };

            // Handle MRP input
            const mrpInput = document.getElementById('mrp');
            mrpInput.oninput = function () {
                updateSalesPriceFromMRP(mrpInput.value);
                updateMarginFromMRPAndSalesPrice(mrpInput.value, puPriceInput.value);
            };

            // Handle sales price input
            const salesPriceInput = document.getElementById('salesPrice');
            salesPriceInput.oninput = function () {
                updateMarginFromMRPAndSalesPrice(mrpInput.value, puPriceInput.value);
            };

            // Handle currency change
            const currencySelect = document.getElementById('currency');
            currencySelect.onchange = function () {
                updateSalesPriceFromMRP(mrpInput.value);
            };

            // Handle sales price save action
            const saveSalesPriceButton = document.getElementById('saveSalesPrice');
            saveSalesPriceButton.onclick = function () {
                const salesPrice = document.getElementById('salesPrice').value;
                const mrpValue = document.getElementById('mrp').value;
                const marginPercentage = document.getElementById('marginPercentage').value;
                const currency = document.getElementById('currency').value;

                if (salesPrice) {
                    // First remove any existing hidden inputs for this item
                    ['price', 'mrp', 'marginPercentage', 'currency'].forEach(field => {
                        const existingInput = tr.querySelector(`input[name="items[${itemIndex}][${field}]"]`);
                        if (existingInput) {
                            tr.removeChild(existingInput);
                        }
                    });

                    // Create new hidden inputs with the latest values
                    const createHiddenInput = (name, value) => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = `items[${itemIndex}][${name}]`;
                        input.value = value;
                        tr.appendChild(input);
                    };

                    createHiddenInput('price', salesPrice);
                    createHiddenInput('mrp', mrpValue);
                    createHiddenInput('marginPercentage', marginPercentage);
                    createHiddenInput('currency', currency);

                    // Close the modal
                    $('#setSalesPriceModal').modal('hide');

                    // Focus back on the item search input field
                    const itemSearchInput = document.getElementById('itemSearch');
                    itemSearchInput.focus();
                } else {
                    alert('Please enter a valid sales price.');
                }
            };
        }
    }
}

// Function to update sales price based on margin percentage
function updateSalesPriceFromMargin(puPrice) {
    const marginPercentage = parseFloat(document.getElementById('marginPercentage').value) || 0;
    const salesPriceFromMargin = parseFloat(puPrice) + (parseFloat(puPrice) * marginPercentage / 100);
    document.getElementById('salesPrice').value = salesPriceFromMargin.toFixed(2); // Set calculated sales price from margin
}

// Add event listener for Enter key on marginPercentage input
document.getElementById('marginPercentage').addEventListener('keydown', function (event) {
    if (event.key === 'Enter') {
        const puPrice = document.getElementById('puPrice').value; // Get the purchase price
        updateSalesPriceFromMargin(puPrice); // Update sales price based on margin
    }
});

function updateSalesPriceFromMRP(mrpValue) {
    const currency = document.getElementById('currency').value;
    let salesPriceFromMRP;
    if (currency === 'INR') {
        salesPriceFromMRP = parseFloat(mrpValue) * 1.60; // Convert MRP to sales price for INR
    } else {
        salesPriceFromMRP = parseFloat(mrpValue); // Use MRP directly for NPR
    }
    document.getElementById('salesPrice').value = salesPriceFromMRP.toFixed(2); // Set calculated sales price from MRP
}

function updateMarginFromMRPAndSalesPrice(mrpValue, puPriceValue) {
    const salesPrice = parseFloat(document.getElementById('salesPrice').value) || 0;
    const puPrice = parseFloat(puPriceValue) || 0;
    const marginPercentageInput = document.getElementById('marginPercentage');

    // Calculate margin percentage based on (Sales Price - PU Price) / PU Price * 100
    const marginPercentage = ((salesPrice - puPrice) / puPrice) * 100;

    if (!isNaN(marginPercentage) && puPrice > 0) {
        marginPercentageInput.value = marginPercentage.toFixed(2); // Update margin percentage
    } else {
        marginPercentageInput.value = ''; // Reset if the calculation fails or PU Price is 0
    }
}