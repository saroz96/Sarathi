<%- include('../layouts/boilerplate', { title: 'Store Details' , body: '' }) %>

    <div class="container mt-4">
        <div class="card shadow-lg">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Store Details</h3>
            </div>
            <div class="card-body">
                <!-- Store Information -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h4 class="text-primary">
                            <%= stores.name %> | <span class="text-muted"><%= stores.description %></span>
                        </h4>
                    </div>
                    <div class="col-md-6 text-right">
                        <p class="mb-1">Company: <strong>
                                <%= currentCompanyName %>
                            </strong></p>
                    </div>
                </div>

                <!-- Racks Section -->
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            Racks in this Store
                            <span class="badge badge-secondary">
                                <%= racks.length %>
                            </span>
                        </h5>
                        <div class="col-md-4">
                            <input type="text" class="form-control form-control-sm" id="rackSearch"
                                placeholder="Search racks..." autofocus>
                        </div>
                    </div>
                    <div class="card-body">
                        <% if (racks.length> 0) { %>
                            <div class="list-group" id="rackList">
                                <% racks.forEach((rack, index)=> { %>
                                    <a href="/retailer/rack/management/<%= rack._id %>"
                                        class="list-group-item list-group-item-action d-flex justify-content-between align-items-center rack-item">
                                        <div>
                                            <strong>
                                                <%= index + 1 %>.
                                            </strong>
                                            <span class="rack-name">
                                                <%= rack.name %>
                                            </span>
                                            <% if (rack.description) { %>
                                                <span class="rack-description">(<%= rack.description %>
                                                        )</span>
                                                <% } %>
                                        </div>
                                        <span class="badge <%= rack.isActive ? 'badge-success' : 'badge-danger' %>">
                                            <%= rack.isActive ? 'Active' : 'Inactive' %>
                                        </span>
                                    </a>
                                    <% }); %>
                            </div>
                            <% } else { %>
                                <div class="alert alert-info mb-0">No racks found in this store</div>
                                <% } %>
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-secondary" id="prevPage">&laquo; Previous</button>
                        <button type="button" class="btn btn-outline-secondary" id="nextPage">Next &raquo;</button>
                    </div>
                </div>
                <div class="col-md-6 text-right">
                    <span id="pageInfo" class="text-muted"></span>
                </div>
            </div>
            <div class="card-footer">
                <a href="/retailer/store/management" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Stores
                </a>
            </div>
        </div>
    </div>

    <style>
        .card {
            border-radius: 15px;
        }

        .list-group-item {
            transition: all 0.3s ease;
        }

        .list-group-item:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        #rackSearch {
            transition: all 0.3s ease;
        }

        #rackSearch:focus {
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        }

        .hidden-rack {
            display: none !important;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const rackSearch = document.getElementById('rackSearch');
            const rackItems = document.querySelectorAll('.rack-item');
            const itemsPerPage = 10;
            let currentPage = 1;
            let totalPages = 1;
            let currentIndex = 0; // Start at first item
            let visibleItems = [];

            function updatePagination() {
                // Get all visible items after search
                visibleItems = Array.from(rackItems).filter(item =>
                    !item.classList.contains('hidden-rack')
                );

                // Calculate total pages
                totalPages = Math.ceil(visibleItems.length / itemsPerPage);
                document.getElementById('pageInfo').textContent =
                    `Page ${currentPage} of ${totalPages}`;

                // Show items for current page
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;

                visibleItems.forEach((item, index) => {
                    item.style.display = (index >= startIndex && index < endIndex) ? '' : 'none';
                });

                // Update button states
                document.getElementById('prevPage').disabled = currentPage === 1;
                document.getElementById('nextPage').disabled = currentPage === totalPages;

                // Always highlight first item after any update
                currentIndex = Math.max(0, Math.min(currentIndex, visibleItems.length - 1));
                highlightCurrentItem();
            }

            function highlightCurrentItem() {
                visibleItems.forEach(item => item.classList.remove('actives'));
                if (visibleItems.length > 0 && currentIndex >= 0) {
                    visibleItems[currentIndex].classList.add('actives');
                    visibleItems[currentIndex].scrollIntoView({
                        behavior: 'smooth',
                        block: 'nearest'
                    });
                }
            }

            function navigateItems(direction) {
                const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;

                if (newIndex >= 0 && newIndex < visibleItems.length) {
                    currentIndex = newIndex;
                    highlightCurrentItem();
                }
            }

            // Pagination controls
            document.getElementById('prevPage').addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    currentIndex = 0; // Reset to first item on page change
                    updatePagination();
                }
            });

            document.getElementById('nextPage').addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    currentIndex = 0; // Reset to first item on page change
                    updatePagination();
                }
            });

            // Search functionality
            if (rackSearch) {
                rackSearch.addEventListener('input', function () {
                    currentPage = 1;
                    currentIndex = 0; // Reset to first item on search
                    const searchTerm = this.value.toLowerCase().trim();

                    rackItems.forEach(item => {
                        const name = item.querySelector('.rack-name').textContent.toLowerCase();
                        const descriptionElement = item.querySelector('.rack-description');
                        const description = descriptionElement ? descriptionElement.textContent.toLowerCase() : '';
                        const match = name.includes(searchTerm) || description.includes(searchTerm);
                        item.classList.toggle('hidden-rack', !match);
                    });

                    updatePagination();
                });
            }

            // Initial setup
            updatePagination();
            highlightCurrentItem(); // Initial highlight

            // Keyboard navigation
            document.addEventListener('keydown', (e) => {
                if (['ArrowUp', 'ArrowDown'].includes(e.key)) {
                    e.preventDefault();
                    navigateItems(e.key === 'ArrowUp' ? 'up' : 'down');
                }

                if (e.key === 'Enter' && currentIndex >= 0) {
                    const selectedItem = visibleItems[currentIndex];
                    selectedItem && (window.location.href = selectedItem.href);
                }
            });
        });
    </script>

    <style>
        .actives {
            background-color: #548FEE !important;
            color: white !important;
            transform: translateX(10px);
        }

        .list-group-item {
            cursor: pointer;
            transition: all 0.2s ease;
        }

        #prevPage,
        #nextPage {
            min-width: 100px;
        }
    </style>